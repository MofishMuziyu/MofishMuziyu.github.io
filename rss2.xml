<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Muziyu&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 02 Jun 2024 11:34:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>集群监控工具原理与使用</title>
      <link>http://example.com/2024/06/02/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <guid>http://example.com/2024/06/02/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Sun, 02 Jun 2024 11:34:45 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2024/06/02/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Client-Go笔记</title>
      <link>http://example.com/2024/06/02/Client-Go%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2024/06/02/Client-Go%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sun, 02 Jun 2024 11:33:59 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2024/06/02/Client-Go%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>环境搭建</title>
      <link>http://example.com/2024/06/02/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <guid>http://example.com/2024/06/02/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Sun, 02 Jun 2024 11:32:12 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2024/06/02/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>云原生容器管理软件</title>
      <link>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</link>
      <guid>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</guid>
      <pubDate>Sun, 02 Jun 2024 11:32:00 GMT</pubDate>
      
      <description>主要介绍了云原生容器管理关键架构，Kubeedge,Openyurt以及Superedge</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="云原生容器管理软件"><a href="#云原生容器管理软件" class="headerlink" title="云原生容器管理软件"></a>云原生容器管理软件</h1><p>云原生需要容器，和容器化的应用程序，容器管理器。而现在市场中最广泛应用的容器管理器为：Kubeedge、Openyurt、Superedge。本文介绍三者的主要架构。</p><hr><h2 id="Kubeedge架构"><a href="#Kubeedge架构" class="headerlink" title="Kubeedge架构"></a>Kubeedge架构</h2><p>KubeEdge是一个开源系统，用于将容器化应用程序编排功能扩展到Edge的主机（将本机容器化的业务流程和设备管理扩展到Edge上的主机，也就是本地流程拓展到云主机）。</p><p>KubeEdge基于Kubernetes构建，并为网络、应用程序部署以及云与边缘之间的元数据同步提供核心基础架构支持。它还支持MQTT，并允许开发人员编写自定义逻辑并在Edge上启用资源受限的设备通信。KubeEdge由云部分和边缘部分组成，边缘和云部分现已开源。</p><p><img src="/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/kubeedge.png" alt="Kubeedge架构"><br>如图所示，该架构主要分为云、边、端三个部分，云上时KubeEdge的控制面，边就是KubeEdge的边缘节点，端就是跑了一些端侧设备。</p><p>下面按图介绍一下各个部分的组成：</p><h3 id="云端："><a href="#云端：" class="headerlink" title="云端："></a>云端：</h3><p>黄色方框三个Module，运行在CloudCore进程中。</p><p>1.CloudHub作为云到边的网络信道。</p><p>2.EdgeController负责管理边缘节点和pod（k8s管理的最小单位级）的metadata（元数据）。</p><p>3.DeviceController负责管理设备的metadata和status信息。</p><h3 id="边缘侧："><a href="#边缘侧：" class="headerlink" title="边缘侧："></a>边缘侧：</h3><p><strong>Edged：</strong></p><p>Edged可以看做是一个简化版的<a href="https://zhuanlan.zhihu.com/p/338462784">kubelet</a>（Kubelet 是 kubernetes 工作节点上的一个代理组件，运行在每个节点上。Kubelet是工作节点上的主要服务，定期从kube-apiserver组件接收新的或修改的Pod规范，并确保Pod及其容器在期望规范下运行。同时该组件作为工作节点的监控组件，向kube-apiserver汇报主机的运行状况。这里Edged类似的管理pod），负责pod生命周期的管理，并实现了和CRI，Volume，ConfigMap，Secret等功能的对接。</p><p><strong>EdgeHub：</strong></p><p>和CloudHub打交道，支持的协议有websocket和QUIC（QUIC由于其在握手方面做了大量优化，以及在断线重连上的优势，非常适合用于边云之间的通信），EdgeHub的主要功能有：</p><ul><li>Keep Alive</li><li>Publish Client Info</li><li>Route to Cloud</li><li>Route to Edge</li></ul><p><a href="https://www.cnblogs.com/yrxing/p/14607878.html?spm=wolai.workspace.0.0.745664a8tAPpON">kubeedge云边协同</a><br><a href="https://zhuanlan.zhihu.com/p/350335104?spm=wolai.workspace.0.0.280364a8YUO7TJ">kubeedge整体介绍</a><br><a href="https://blog.csdn.net/weixin_43401958/article/details/123203566?spm=wolai.workspace.0.0.280364a8YUO7TJ">kubeedge架构介绍</a></p><hr><h2 id="Openyurt整体架构"><a href="#Openyurt整体架构" class="headerlink" title="Openyurt整体架构"></a>Openyurt整体架构</h2><p>OpenYurt也是基于原生Kubernetes构建的框架。</p><blockquote><p>Kubernetes，简称 k8s或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。Kubernetes 最开始是由 Google 的工程师设计开发的。Google 作为 Linux 容器技术的早期贡献者之一，曾公开演讲介绍 Google 如何将一切都运行于容器之中（这是 Google 的云服务背后的技术）。Google 一周内的容器部署超过 20 亿次，全部的工作都由内部平台 Borg 支撑。Borg 是 Kubernetes 的前身，几年来开发 Borg 的经验教训也成了影响 Kubernetes 中许多技术的主要因素。</p></blockquote><p><img src="/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/openyurt.png" alt="openyurt架构"></p><p>其中蓝色框为原生Kubernetes组件，橙色框中组件为OpenYurt组件。</p><h3 id="节点分类"><a href="#节点分类" class="headerlink" title="节点分类"></a>节点分类</h3><ul><li>Cloud Node：通过内网与Kubernetes Master连接，主要用于部署运行中心控制组件。节点Label: <a href="http://openyurt.io/is-edge-worker:">openyurt.io&#x2F;is-edge-worker:</a> false</li><li>Edge Node：通过公网与Kubernetes Master连接，一般和边缘生产环境距离较近，主要用于部署运行边缘业务容器。节点Label: <a href="http://openyurt.io/is-edge-worker:">openyurt.io&#x2F;is-edge-worker:</a> true</li></ul><h3 id="边缘访问云端Kube-apiserver的管控流量"><a href="#边缘访问云端Kube-apiserver的管控流量" class="headerlink" title="边缘访问云端Kube-apiserver的管控流量"></a>边缘访问云端Kube-apiserver的管控流量</h3><p>Edge Node上的Kubelet, kube-proxy, Flannel以及其他云原生组件访问云端kube-apiserver的流量都会经过YurtHub组件，同时YurtHub组件会在本机磁盘上缓存云端返回的数据，当云边网络异常时YurtHub将使用本地缓存数据来恢复边缘业务。</p><h3 id="云边数据面流量"><a href="#云边数据面流量" class="headerlink" title="云边数据面流量"></a>云边数据面流量</h3><p>由于边缘侧节点的网络区域与云上网络域不在一个网络平面内，并且边缘节点一般不暴漏在公网上，为了实现云与边、边与边的网络通信，Raven组件通过构建VPN的方式打通云边主机网络与容器网络，这些云边的数据面流量将从通过Raven Agent实现互访互通。</p><h3 id="OpenYurt组件介绍"><a href="#OpenYurt组件介绍" class="headerlink" title="OpenYurt组件介绍"></a>OpenYurt组件介绍</h3><ul><li><strong>YurtHub:</strong><ul><li>节点维度的SideCar，节点上组件和kube-apiserver之间的流量代理，有边缘(edge)和云端(cloud)两种运行模式。其中边缘YurtHub会缓存云端返回的数据。</li><li>部署形态：以Static Pod形态运行在每个节点上。</li></ul></li><li><strong>Raven:</strong><ul><li>构建云边VPN访问通道，实现云边、边边网络互通，其中RavenControllerManager组件协调Gateway节点,以及RavenAgent组件负责构建VPN以及路由管理。</li><li>部署形态：RavenControllerManager以Deployment形态部署在Cloud Node或Master Node上，Raven Agent以DaemonSet部署在所有节点上。</li></ul></li><li><strong>YurtControllerManager：</strong><ul><li>中心的控制器，目前包括NodeLifeCycle Controller(不驱逐自治节点上的Pod)，YurtCSRController(用于Approve边缘的证书申请)</li><li>部署形态：Deployment形态部署在Cloud Node上。</li></ul></li><li><strong>YurtAppManager:</strong><ul><li>跨地域的资源及业务负载管理器，目前包括NodePool(节点池管理)，YurtAppSet(之前名为UnitedDeployment)(节点池维度的业务负载管理)，YurtAppDaemon(节点池维度的Daemonset), YurtIngress(节点池维度的Ingress Controller管理器)</li><li>部署形态： Deployment形态部署在Cloud Node上。</li></ul></li><li><strong>YurtDeviceController&#x2F;YurtEdgeXManager:</strong><ul><li>用于边缘IOT解决方案的非侵入融合，通过云原生模式管控边缘设备。目前EdgeX Foundry已经无缝集成到OpenYurt架构中。</li><li>YurtEdgeXManager以Deployment形态部署在Cloud Node上，YurtDeviceController以YurtAppSet(之前名为UnitedDeployment)形态部署在Edge Node上，每个NodePool上部署一套YurtDeviceController。</li></ul></li><li><strong>Pool-Coordinator:</strong><ul><li>在节点池内提供KV数据存储(仅存储在内存中)和分布式锁等能力，供YurtHub选举产生Leader，从而实现心跳代理，云边流量复用，节点池内运维监控等能力。</li><li>以YurtAppDaemon形态部署，会确保每个边缘节点池中有一个实例。</li></ul></li></ul><p><img src="/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/%E8%BE%B9%E7%BC%98%E8%8A%82%E7%82%B9.png" alt="边缘节点"></p><ul><li>Master节点位于云端，作为OpenYurt集群的管控节点，同时也作为集群的Cloud Node，上面部署了原生k8s的控制面组件controlplane，以及OpenYurt的管控组件Yurt-Controller-Manager、Yurt-App-manager、Tunnel-Server</li><li>Cloud-Node节点位于云端，作为OpenYurt集群的Cloud Node，可以用于部署OpenYurt的管控组件，本文实验中只用于演示了云端节点接入操作，没有实际部署OpenYurt的管控组件。</li><li>Edge-Node位与边缘，作为集群的边缘节点，部署了节点自治组件YurtHub，以及云端通道组件tunnel-agent。</li></ul><p><a href="https://openyurt.io/zh/">openyurt官网</a></p><p><a href="https://openyurt.io/zh/docs/core-concepts/architecture">系统架构 | OpenYurt</a></p><p><a href="https://developer.aliyun.com/article/813934#:~:text=OpenYurt,%E7%AE%A1%E7%90%86%E7%AD%89%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E3%80%82">openyurt入门实操</a></p><hr><h2 id="Superedge整体架构"><a href="#Superedge整体架构" class="headerlink" title="Superedge整体架构"></a>Superedge整体架构</h2><p><img src="/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/superedge.png" alt="Superedge架构"></p><h3 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h3><ul><li><strong>tunnel隧道技术</strong></li></ul><p>tunnel cloud与tunnel edge使得边缘与中心互通，即使边缘节点没有公网IP也能建立边缘和云端的连接。</p><ul><li><strong>边缘自治</strong></li></ul><p>就算引入隧道技术，边缘节点和云端的网络也不能时刻保持稳定，甚至会断连，自治使得断网或者边缘节点重启时，节点上的服务不受影响或能够恢复。</p><p>Life-Apiserver代理节点上所有组件和业务容器访问云端Kube-Apiserver的请求，并对请求结果做高速缓存。在断连时，利用缓存提供服务，实现边缘自治。</p><ul><li><strong>边缘分布式健康检查</strong></li></ul><p>边缘节点的异常由Edge-Health模块完成，每一个边缘节点有各自的Edge-Health，在一定的区域内，边缘节点能够互相访问，其中EH模块的互相访问可以确定彼此的安全性，最终一个节点的安全与否由所有访问的模块“投票”表决。若一个节点产生异常，异常结果会反馈给云端的Edge-Health-Admission，由云端根据投票结果和Apiserver选择将服务驱逐某边缘节点。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/">-云原生</category>
      
      
      <comments>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>云原生边缘技术</title>
      <link>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BE%B9%E7%BC%98%E6%8A%80%E6%9C%AF/</link>
      <guid>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BE%B9%E7%BC%98%E6%8A%80%E6%9C%AF/</guid>
      <pubDate>Sun, 02 Jun 2024 11:31:42 GMT</pubDate>
      
      <description>什么是云原生技术</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="云原生边缘技术"><a href="#云原生边缘技术" class="headerlink" title="云原生边缘技术"></a>云原生边缘技术</h1><p>云原生的本质其实是云原生技术和边缘技术的结合。</p><h2 id="云原生技术"><a href="#云原生技术" class="headerlink" title="云原生技术"></a>云原生技术</h2><p>云原生没有确切的定义，云原生一直在发展变化之中，解释权不归某个人或组织所有。云原生（CloudNative）是一个组合词，Cloud+Native。Cloud表示应用程序位于云中，而不是传统的数据中心；Native表示应用程序从设计之初即考虑到云的环境，原生为云而设计，在云上以最佳姿势运行，充分利用和发挥云平台的弹性+分布式优势。Pivotal公司的Matt Stine于2013年首次提出云原生（CloudNative）的概念；2015年，云原生刚推广时，Matt Stine在《迁移到云原生架构》一书中定义了符合云原生架构的几个特征：12因素、微服务、自敏捷架构、基于API协作、扛脆弱性；到了2017年，Matt Stine在接受InfoQ采访时又改了口风，将云原生架构归纳为模块化、可观察、可部署、可测试、可替换、可处理6特质；而Pivotal最新官网对云原生概括为4个要点：DevOps+持续交付+微服务+容器。</p><p><img src="/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BE%B9%E7%BC%98%E6%8A%80%E6%9C%AF/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84.png" alt="云原生"></p><p><strong>微服务</strong>：几乎每个云原生的定义都包含微服务，跟微服务相对的是单体应用。</p><p><strong>容器化</strong>：Docker是应用最为广泛的容器引擎，在思科谷歌等公司的基础设施中大量使用，是基于LXC技术搞的，容器化为微服务提供实施保障，起到应用隔离作用。</p><p><strong>DevOps</strong>：这是个组合词，Dev+Ops，就是开发和运维合体，不像开发和产品，经常刀刃相见，实际上DevOps应该还包括测试，DevOps是一个敏捷思维，是一个沟通文化，也是组织形式，为云原生提供持续交付能力。</p><p><strong>持续交付</strong>：持续交付是不误时开发，不停机更新，小步快跑，反传统瀑布式开发模型，这要求开发版本和稳定版本并存，其实需要很多流程和工具支撑。</p><p>总而言之，符合云原生架构的应用程序应该是：采用开源堆栈（K8S+Docker）进行容器化，基于微服务架构提高灵活性和可维护性，借助敏捷方法、DevOps支持持续迭代和运维自动化，利用云平台设施实现弹性伸缩、动态调度、优化资源利用率。</p><h3 id="云原生支撑技术"><a href="#云原生支撑技术" class="headerlink" title="云原生支撑技术"></a>云原生支撑技术</h3><p><strong>容器技术：</strong></p><p>容器的本质是一个进程，通过对该进程进行隔离和资源控制，其在运行时不会相互干扰。同时容器具有良好的移植性，可以在不同的操作系统中良好运行。以前，开发者通常使用虚拟机完成某些功能，但是虚拟机的系统开销较大，并且不利于程序的移植与部署。与虚拟机相比，容器更加轻量化，打包下载都更方便，例如Docker。</p><p>Docker 容器中每个应用不需要与其他应用组合，也不依赖于生产环境基础结构，能在研发、测试、生产过程中为应用提供一致的环境。Docker 使用客户端—服务器模式，利用远程应用程序接口（API, application programming interface）来管理和创建 Docker 容器。Docker 容器通过 Docker镜像创建，镜像就像容器的模板，每次创建容器都依赖于已有的镜像。</p><hr><p><strong>容器管理器</strong>：</p><p>K8s，是一个可移植、可扩展的开源平台，用于管理基于容器的微服务集群。在 Kubernetes 中，可以创建多个 pod（Kubernetes的基本单元），每个 pod 中可以部署多个容器，每个容器中可以部署一个服务，然后通过内置或自定义的负载均衡策略，实现对一组微服务的管理、注册和访问。</p><hr><p><strong>服务网格：</strong></p><p>尽管在很多情况下 Kubernetes 能够完成微服务治理功能，但开发者仍然会遇到其他问题。在实际生产环境中，由于微服务的实现方式不同，如果要使微服务之间进行通信，开发者需要预先协调通信接口和方式。此外，流量的管控与调度由于要考虑环境中的各种因素，所以开发过程并不简单。因此，服务网格应运而生。在服务网格中，每个微服务通过边车代理其服务间通信，因而大量的微服务与对应的边车会表现出网格的形式，这就是服务网格名称的由来。服务网格可以在多种环境中部署，最常用的是Kubernetes。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/">-云原生</category>
      
      
      <comments>http://example.com/2024/06/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BE%B9%E7%BC%98%E6%8A%80%E6%9C%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>云计算与边缘计算</title>
      <link>http://example.com/2023/09/02/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</link>
      <guid>http://example.com/2023/09/02/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</guid>
      <pubDate>Sat, 02 Sep 2023 11:31:28 GMT</pubDate>
      
      <description>云计算与边缘计算的区别与联系</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="云计算和边缘计算"><a href="#云计算和边缘计算" class="headerlink" title="云计算和边缘计算"></a>云计算和边缘计算</h1><h2 id="什么是云计算"><a href="#什么是云计算" class="headerlink" title="什么是云计算"></a>什么是云计算</h2><ul><li>通俗地讲，云计算就是对计算机硬件，系统，网络，应用软件等资源的集中部署和再分配，以求达到计算资源的利用效率最大化。</li><li>云计算也是分布式计算的一种，通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。简单地说，就是简单的分布式计算，解决任务分发，并进行计算结果的合并。因而，云计算又称为网格计算。通过这项技术，可以在很短的时间内（几秒种）完成对数以万计的数据的处理，从而达到强大的网络服务。</li><li>按照部署模型大致分为三类：公有云、私有云、混合云；服务模式也有三种：Saas、PaaS、IaaS。</li></ul><p>最底层的</p><p><strong>IaaS:</strong>  <strong><strong>Infrastructure</strong></strong> <strong>-as-a-Service（基础设施即服务）</strong></p><p>Infrastructure就是基础设施的意思，IaaS有时候也叫Hardware-as-a-Service，一下子就理解了吧？就是提供硬件相关的服务。以前，你要建个网站，建个FTP，需要自己买服务器和交换机等硬件设备，现在不用了，可以使用IaaS服务商提供的IaaS服务。</p><p>再往上</p><p><strong>PaaS:</strong>  <strong><strong>Platform</strong></strong> <strong>-as-a-Service（平台即服务）</strong></p><p>P就是Platform，平台。某些时候也叫做中间件。基于硬件之上，平台开发都可以在这一层进行。PaaS服务提供商提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统，以及数据库系统等。</p><p>继续往上</p><p><strong>SaaS:</strong>  <strong><strong>Software</strong></strong> <strong>-as-a-Service（软件即服务）</strong></p><p>这一层是和你的生活每天接触的一层，在这一层上，就可以直接访问和使用服务功能了！例如通过网页浏览器收发电邮，订购商品，查看航班信息等。在你的面前，就是具体的应用服务。</p><p>除了IaaS、PaaS、SaaS之外，现在还衍生出了很多相关的概念，例如BaaS（后端即服务，Backend-as-a-Service）、CaaS（通讯即服务，Communications-as-a-Service）、DaaS（数据即服务，Data-as-a-Service）。</p><h2 id="云计算的不足"><a href="#云计算的不足" class="headerlink" title="云计算的不足"></a>云计算的不足</h2><p>随着边缘计算的兴起，在太多场景中需要计算庞大的数据并且得到即时反馈。这些场景开始暴露出云计算的不足，主要有以下几点：</p><ul><li><strong>大数据的传输问题：</strong>据估计，到 2020 年，每人每天平均将产生 1.5GB 的数据。随着越来越多的设备连接到互联网并生成数据，以中心服务器为节点的云计算可能会遇到带宽瓶颈。</li><li><strong>数据处理的即时性：</strong>据统计，无人驾驶汽车每秒产生约 1GB 数据，波音 787 每秒产生的数据超过 5GB；2020 年我国数据储存量达到约 39ZB，其中约 30% 的数据来自于物联网设备的接入。海量数据的即时处理可能会使云计算力不从心。</li><li><strong>隐私以及能耗问题：</strong>云计算将身体可穿戴、医疗、工业制造等设备采集的隐私数据传输到数据中心的路径比较长，容易导致数据丢失或者信息泄露等风险；数据中心的高负载导致的高能耗也是数据中心管理规划的核心问题。</li></ul><h2 id="什么是边缘计算"><a href="#什么是边缘计算" class="headerlink" title="什么是边缘计算"></a>什么是边缘计算</h2><h3 id="边缘节点"><a href="#边缘节点" class="headerlink" title="边缘节点"></a>边缘节点</h3><p>边缘结点指的就是<strong>在数据产生源头和云中心之间</strong>任一具有计算资源和网络资源的结点。<br>手机就是人与云中心之间的边缘结点，网关是智能家居和云中心之间的边缘结点。在理想环境中，边缘计算指的就是在<strong>数据产生源附近</strong>分析、处理数据，没有数据的流转，进而<strong>减少网络流量和响应时间</strong>。</p><h3 id="边缘节点作用"><a href="#边缘节点作用" class="headerlink" title="边缘节点作用"></a>边缘节点作用</h3><p>由于边缘结点的存在，我们成功的把一部分网络边缘的运算处理从云中心转移到了数据产生源头附近，也就是转移到了网络边缘附近，从而达到了数据在网络中传输的时间和带宽，提高了整个网络的效率和性能。由于边缘结点能对数据进行本地处理，提高了安全性和隐私保护的能力。</p><h3 id="边缘计算的优势"><a href="#边缘计算的优势" class="headerlink" title="边缘计算的优势"></a>边缘计算的优势</h3><p>边缘计算着重要解决的问题，是传统云计算（或者说是中央计算）模式下存在的高延迟、网络不稳定和低带宽问题，同时边缘计算通过将计算需求转移至靠近用户的一侧，利用网络边缘的计算资源承载云计算服务，利用“数据上行、计算下行”的方式，突破了“终端＋数据中心”两级架构的局限性，可以满足应用对时延与带宽的需求。总体可以将边缘计算的优势总结如下：</p><ul><li>分布式和低延时</li><li>效率更高</li><li>更加智能</li><li>缓解了流量压力</li></ul><h2 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h2><p>边缘计算的概念是建立在云计算的基础上的。边缘计算和云计算互相协同，它们是彼此优化补充的存在，共同使能行业数字化转型。也有人说边缘计算是“最近端的云计算”，但是这只是一个比喻，事实上边缘计算不属于云计算。边缘计算是云计算技术的一种补充或者说云计算的“预处理”。</p><hr><p>云计算是一个统筹者，它负责长周期数据的大数据分析，能够在周期性维护、业务决策等领域运行。</p><hr><p>边缘计算着眼于实时、短周期数据的分析，更好地支撑本地业务及时处理执行。边缘计算靠近设备端，也为云端数据采集做出贡献，支撑云端应用的大数据分析，云计算也通过大数据分析输出业务规则下发到边缘处，以便执行和优化处理。</p><p><a href="https://www.zhihu.com/question/339553102?spm=wolai.workspace.0.0.f2a567e0nGXC5Q">什么是边缘节点</a></p><p><a href="https://zhuanlan.zhihu.com/p/406521426?spm=wolai.workspace.0.0.f2a567e0nGXC5Q">什么是边缘计算和云计算</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NTA0MDUyMA==&mid=2456659540&idx=1&sn=6a5ea9dd27706eab1ffba4a96e0715da&chksm=fda50b33cad282259dc19608308278d678c2d53b41901d952a429e269f82854361bafc2c1c69&scene=21#wechat_redirect">云计算的形象解读</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/">-云计算</category>
      
      
      <comments>http://example.com/2023/09/02/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
