<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>My_Little_Brony&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 19 Aug 2023 15:13:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>quicksort</title>
      <link>http://example.com/2023/04/12/quicksort/</link>
      <guid>http://example.com/2023/04/12/quicksort/</guid>
      <pubDate>Tue, 11 Apr 2023 16:01:34 GMT</pubDate>
      
      <description>简介，这是我学习算法的开始，基础算法之快速排序法</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="快速排序C-版：比较简单，所以没有注释："><a href="#快速排序C-版：比较简单，所以没有注释：" class="headerlink" title="快速排序C++版：比较简单，所以没有注释："></a>快速排序C++版：<br>比较简单，所以没有注释：</h2><p><strong>需要注意的一些点就是：</strong></p><blockquote><ol><li>声明数组的长度的时候是怎么声明的</li><li>快排函数以j为边界的时候怎么写的</li><li>核心思想是分治</li></ol></blockquote><pre><code>#include`&lt;iostream&gt;`using namespace std;void quicksort(int q[], int l, int r);const int N = 1000010;       //声明int main()&#123;           //主函数    int n;    cin&gt;&gt;n;    int q[N];    for (int i=0;i&lt;n ; i++)&#123;        cin&gt;&gt;q[i];    &#125;    quicksort(q,0,n-1);for (int j=0;j&lt;n-1;j++)&#123;        cout&lt;&lt;q[j]&lt;&lt;&quot; &quot;;    &#125;    cout&lt;&lt;q[n-1];    return 0;&#125;**快排函数**void quicksort(int q[],int l, int r)&#123;    if( l&gt;= r)&#123;      //递归出口        return;&#125;int i,j,tmp;    i = l-1;j = r+1;    int x = q[(l+r)&gt;&gt;1];   //初始化分解条件while(i&lt; j)&#123;            //循环过程    do i++; while(q[i]&lt; x);    do j--; while(q[j] &gt;x);    if (i&lt;j)&#123;        tmp = q[i];        q[i]  = q[j];        q[j] = tmp;&#125;    &#125;quicksort(q,l,j);            //分治      quicksort(q,j+1,r);//分治&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/code/">-code</category>
      
      
      <category domain="http://example.com/tags/%E7%AE%97%E6%B3%95/">-算法</category>
      
      
      <comments>http://example.com/2023/04/12/quicksort/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>自制markdown语法说明</title>
      <link>http://example.com/2023/04/01/Markdown%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2023/04/01/Markdown%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sat, 01 Apr 2023 08:00:26 GMT</pubDate>
      
      <description>这是一个Markdown语法简介，个人写博客和操作说明几乎不可避免的用到这种语法，因此稍作整理如下：</description>
      
      
      
      <content:encoded><![CDATA[<hr><h2 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h2><ol><li><strong>“—-”</strong>  ： 分割线如上</li><li><strong>“两个空格加换行”</strong>  ： 换行</li><li><strong>“中间隔一个空行”</strong> ：创建段落</li></ol><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ol><li><strong>粗体</strong> ： 四个星号中间包围</li><li><strong>斜体</strong> ： 两个星号中间</li><li><em><strong>粗体加斜体</strong></em> ： 三个星号中间包围着</li></ol><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><strong>引用块</strong> ： “&gt;”在大于号后面添加内容即可</li><li><strong>多段落引用</strong>： “&gt;”在段落与段落之间的空行上面也加入“&gt;”</li><li><strong>引用格式</strong>：引用块中同样遵循Markdown格式</li><li><strong>文内链接</strong>：***<a href="http://lmuziyu.cn/" title="点开就是我放的本站的网址">作者的网站</a>***,【】（）中括号里面是文本内容，小括号是链接地址 ，给出链接地址之后可以加“”,在双引号里编辑提示。可以被星号强调以及斜体</li></ol><hr><h2 id="文内格式"><a href="#文内格式" class="headerlink" title="文内格式"></a>文内格式</h2><ol><li><p><strong>列表</strong> ： 数字列表直接输入数字“1.”，并在小数点后加空格</p></li><li><p><strong>无序列表</strong>：用“-”代替“1.”</p></li><li><p><strong>在列表中保留元素</strong>：加入一个tab缩进</p><ul><li><strong>嵌套列表</strong>：加入tab缩进之后继续使用“1.”或者“-”</li></ul></li><li><p><strong>代码块</strong>：直接缩进四个空格，如果在列表中，缩进8个空格,与正文中间留空行</p><p>#include&lt;stdio.h&gt;int  main(void)  {printf(“hello,world!”);<br>return 0;<br>}</p></li><li><p><strong>单词或短语转为代码</strong>：“<code>code time</code>”,用反引号标注起来</p></li><li><p><strong>图片</strong>：要添加图像，请添加感叹号（!），然后在中括号中添加替代文本，并在小括号中添加图像资源的路径</p></li><li><p><strong>转义字符</strong>： 显示Markdown语法所占用的原有的字符，“&#x2F;”后面添加即可，”\ *” &#x3D; *</p></li></ol><hr><p>##高级语法</p><p><strong>表格</strong></p><blockquote><p>表格使用 | 作为竖线分隔符，在第二行使用|—:|来确定对齐方式<br>比如：</p></blockquote><p>##突然发现</p><blockquote><p>其实使用markdown自带的编辑器里面可以很方便地插入一些段落，所以对于基础语法熟练使用即可了，高级语法完全就可以直接插入段就行，欧克，以后不会再补充这个markdown了。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/notes/">notes</category>
      
      
      <category domain="http://example.com/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      <category domain="http://example.com/tags/Markdown/">Markdown</category>
      
      
      <comments>http://example.com/2023/04/01/Markdown%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
